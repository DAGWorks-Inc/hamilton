FROM node:20 AS build-stage

# Set working directory
WORKDIR /usr/src/app

# Accept environment variables as build arguments
ARG REACT_APP_AUTH_MODE
ARG REACT_APP_USE_POSTHOG
ARG REACT_APP_API_URL
ARG NGINX_PORT=8242

# Install app dependencies by copying package.json and package-lock.json
COPY package.json package-lock.json ./

# Install dependencies
RUN npm install

# Copy the rest of the frontend directory
COPY . .

# Environment variables
ENV REACT_APP_AUTH_MODE=${REACT_APP_AUTH_MODE}
ENV REACT_APP_USE_POSTHOG=${REACT_APP_USE_POSTHOG}
ENV REACT_APP_API_URL=${REACT_APP_API_URL}
ENV NODE_OPTIONS="--max-old-space-size=8192"
ENV REACT_APP_HAMILTON_SUB_PATH=${REACT_APP_HAMILTON_SUB_PATH}

RUN npm run build

FROM nginx:stable-alpine AS production-stage

# Build Args to pass through to production-stage
ARG NGINX_PORT

ENV NGINX_PORT=${NGINX_PORT}

# Copy the build output to replace the default nginx contents.
COPY --from=build-stage /usr/src/app/build /usr/share/nginx/html

# Expose port to the outside once the container has launched
EXPOSE ${NGINX_PORT}

# Use envsubst to allow the frontend to find the backend from ${REACT_APP_API_URL}
RUN mkdir /etc/nginx/templates
COPY nginx/templates/default.conf.template /etc/nginx/templates/default.conf.template

# Start Nginx and keep the process from backgrounding and the container from quitting
# This prevents envsubst from running! (nginx needs to be the 1st value of the command)
#CMD ["sh", "-c", "echo \"Frontend running on port ${NGINX_PORT}, go to http://localhost:${NGINX_PORT} to view the app.\"; nginx -g 'daemon off;'"]
CMD ["nginx", "-g", "daemon off;"]
